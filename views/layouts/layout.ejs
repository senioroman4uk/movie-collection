<!DOCTYPE html>
<html lang="en">
  <head>
    <title><%- utilService.makeTitle(typeof title != 'undefined' ? title : '') %></title>
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <meta charset="utf-8">

    <% if (typeof actor !== 'undefined' && actor) {%>
    <meta content="/inages/actors/<%- actor.cover %>" property="og:image">
    <meta content="<%- actor.firstName + ' ' + actor.lastName %>" property="og:title">
    <meta content="<%= actor.generalInfo %>" property="og:description">
   <%} else if (typeof  movie !== 'undefined' && movie) {%>
    <meta content="/images/movies/<%- movie.cover %>" property="og:image">
    <meta content="<%- movie.name %> (<%- movie.year %>)" property="og:title">
    <meta content="<%= movie.description %>" property="og:description">
    <% }%>
    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/bower_components/bootstrap/dist/css/bootstrap.css">
    <link rel="stylesheet" href="/bower_components/tooltipster/css/tooltipster.css">
    <link rel="stylesheet" href="/bower_components/bootstrap-table/dist/bootstrap-table.css">
    <link rel="stylesheet" href="/styles/app.css">
    <link rel="stylesheet" href="/styles/carousel.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
    <!--SCRIPTS-->
    <script src="/bower_components/jquery/dist/jquery.js"></script>
    <script src="/bower_components/bootstrap/dist/js/bootstrap.js"></script>
    <script src="/bower_components/tooltipster/js/jquery.tooltipster.js"></script>
    <script src="/bower_components/ejs/ejs.js"></script>
    <script src="/bower_components/moment/moment.js"></script>
    <script src="/bower_components/bootstrap-table/dist/bootstrap-table.js"></script>
    <script src="/js/footerController.js"></script>
    <script src="/js/modernizr.js"></script>
    <script src="/js/myCarousel.js"></script>
    <script src="/js/pager.js"></script>
    <!--SCRIPTS END-->
  </head>

  <body>
  <h1 class="hidden"><%- utilService.makeTitle(typeof title != 'undefined' ? title : '') %></h1>
  <div id="container" class="container">
    <%- partial ('header.ejs')%>
    <main id="content" class="container-fluid">
      <%- body %>
      <br>
    </main>
    <%- partial ('footer.ejs')%>
  </div>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

  </body>
</html>
